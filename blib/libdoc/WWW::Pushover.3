.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::Pushover 3"
.TH WWW::Pushover 3 "2014-04-15" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Pushover \- A lightweight Pushover API warpper.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    use WWW::Pushover;
\&    my $pushover = WWW::Pushover\->new(
\&        token => MY_PUSHOVER_TOKEN,
\&        user  => MY_PUSHOVER_USER,
\&    );
\&    $pushover\->notify(
\&         message => "Hello! Pushover",
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
WWW::Pushover is Pushover <http://www.pushover.net/> interface.
.SH "FIRST, YOU HAVE TO CREATE API KEY"
.IX Header "FIRST, YOU HAVE TO CREATE API KEY"
This method is required Pushover \s-1API\s0 key.
.PP
If you are Pushover user alredy,
then you can create \*(L"Your Applications\*(R" on <http://www.pushover.net/>.
You see this \*(L"Your Application\*(R" detail, you can get \*(L"\s-1API\s0 Token/Key\*(R".
.PP
If you are not Pushover user yet,
register it. However pushover client application is charged.
.PP
Now I consider whether \*(L"\s-1API\s0 Token/Key\*(R" packs together WWW::Pushover
\&\s-1CPAN\s0 distribution package. In future version WWW::Pushover,
it has its exclusive \*(L"\s-1API\s0 Token/Key\*(R" for module users convenience.
.SH "METHODS"
.IX Header "METHODS"
.SS "WWW::Pushover\->new( token => \s-1TOKEN,\s0 user => \s-1USER, ... \s0)"
.IX Subsection "WWW::Pushover->new( token => TOKEN, user => USER, ... )"
.Vb 4
\&    my $pushover = WWW::Pushover\->new( token => TOKEN, user => USER );
\&    $pushover\->notify(
\&        message => $message,
\&    );
.Ve
.PP
Constructor. It gives some key/value pair parameters.
\&\fBtoken and user keys are required\fR.
.PP
Other keys, this keys are defined in source code.
.PP
.Vb 1
\&    my @OPTINOS = (qw/device title url url_title priority timestamp sound/);
.Ve
.PP
See following methods for detail.
.SS "sounds"
.IX Subsection "sounds"
.Vb 2
\&    # In list context.
\&    my @sounds_detail = $pushover\->sounds(); # output detail
.Ve
.PP
Output sound names. There are feteched newest data from \s-1API\s0 server.
.PP
Getting sound name is used on \fBsound\fR method. See below.
.SS "device"
.IX Subsection "device"
Specify device. This is optional.
.PP
Your user's device name to send the message directly to that device,
rather than all of the user's devices
.SS "title"
.IX Subsection "title"
Speicfy title. This is optional.
.PP
Your message's title, otherwise your app's name is used.
.SS "url"
.IX Subsection "url"
Specify \s-1URL.\s0 This is optional.
.PP
It is specified iOS specific application launched \s-1URL\s0 schema.
You can use it to launch other application.
.PP
A supplementary \s-1URL\s0 to show with your message.
.SS "url_title"
.IX Subsection "url_title"
Specify \s-1URL\s0's title. This is optional.
.PP
A title for your supplementary \s-1URL,\s0 otherwise just the \s-1URL\s0 is shown
.SS "priority"
.IX Subsection "priority"
Specify priority. This is optional.
.PP
Send as \-1 to always send as a quiet notification,
1 to display as high-priority and bypass the user's quiet hours,
or 2 to also require confirmation from the user.
.SS "timestamp"
.IX Subsection "timestamp"
A Unix timestamp of your message's date and time to display to the user,
rather than the time your message is received by our \s-1API.\s0
.SS "sound"
.IX Subsection "sound"
Specify sound to notify.
.PP
See \fBsounds\fR method for getting sound names.
.SS "_json_parser"
.IX Subsection "_json_parser"
Internal method.
.SS "_ua"
.IX Subsection "_ua"
Internal method.
.SS "_http_post"
.IX Subsection "_http_post"
Internal method.
.SS "notify"
.IX Subsection "notify"
Execution notify operation.
.PP
.Vb 1
\&    $pushover\->notify( message => "some message" );
.Ve
.PP
When this method is called, WWW::Pushover sends message to specify device(s).
.PP
If you want to send non-ASCII multibyte character,
you must construct message as \s-1UTF\-8.\s0
.PP
And this message's \s-1UTF\-8\s0 string is \fBrequired as flagged (Perl internal) string\fR on current version's WWW::Pushover (VERSION=0.01).
.SH "MOTIVATION"
.IX Header "MOTIVATION"
As perl pushover \s-1API, \s0WebService::Pushover is already exist.
But it is too heavy, e.g. dependecy of Moose, and so on.
.PP
WWW::Pushover concept is light interface and
only core module implementation over Perl5.14 or it's later.
.PP
And we supports some trivial \s-1API\s0 which is not supported WebService::Pushover.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
WebService::Pushover,
.PP
Pushover \s-1REST API\s0 <https://pushover.net/api>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright (C) \s-1OGATA\s0 Tetsuji.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1OGATA\s0 Tetsuji <tetsuji.ogata@gmail.com>
